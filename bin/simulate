#!/usr/bin/env node

// Copyright (c) Microsoft Corporation. All rights reserved.

/*eslint-env node */

var minimist = require('minimist');
var os = require('os');
var simulate = require('../src/simulate.js');
var log = simulate.log;

try {
    var args = processArgs();
    simulate(args).catch(function (e) {
        logErrorAndExit(e);
    });
} catch (e) {
    logErrorAndExit(e);
}

function logErrorAndExit(e) {
    log.error(e);
    process.exit(1);
}

function unknownOptHandler(optName) {
    // Throw error on unknown option. Note for '--port': minimist does not support the 'number' type, so we can't list 'port' as a known option.
    if (optName.indexOf('-') === 0 && optName !== '--port') {
        throw new Error('Unknown option \'' + optName + '\'');
    }

    return true;
}

function processArgs() {
    try {
        var parserOptions = {
            string: ['dir', 'simhostui', 'target', 'simulationpath', 'device', 'lang', 'theme', 'middleware'],
            boolean: ['livereload', 'forceprepare', 'corsproxy', 'generateids', 'spaurlrewrites'],
            default: {
                dir: null,
                livereload: true,
                port: null,
                simhostui: null,
                target: null,
                corsproxy: true,
                simulationpath: null,
                device: null,
                lang: null,
                theme: null,
                middeware: null,
                generateids: false,
                spaurlrewrites: false
            },
            unknown: unknownOptHandler
        };
        var parsed = minimist(process.argv.slice(2), parserOptions); // Remove 'node' and 'simulate' using Array.prototype.slice()

        if (parsed._.length > 1) {
            throw new Error('Too many arguments');
        }

        return {
            dir: parsed.dir,
            livereload: parsed.livereload,
            platform: parsed._.length === 1 ? parsed._[0] : null,
            port: parsed.port,
            forceprepare: parsed.forceprepare,
            simhostui: parsed.simhostui,
            target: parsed.target,
            corsproxy: parsed.corsproxy,
            simulationpath: parsed.simulationpath,
            device: parsed.device,
            lang: parsed.lang,
            theme: parsed.theme,
            middleware: parsed.middleware,
            generateids: parsed.generateids,
            spaurlrewrites: parsed.spaurlrewrites
        };
    } catch (err) {
        throw new Error('Error parsing arguments: ' + (err.message || err) + os.EOL + os.EOL + getUsageString());
    }
}

function getUsageString() {
    var message = 'Usage:' + os.EOL + 'simulate';
    var options = [
        '[PLATFORM]',
        '[--device DEVICE_ID]',
        '[--corsproxy (CORS_PROXY)]',
        '[--dir DIR]',
        '[--livereload (LIVERELOAD)]',
        '[--port PORT]',
        '[--forceprepare (FORCE_PREPARE)]',
        '[--simhostui SIM_HOST_UI_MODULE_PATH]',
        '[--simulationpath SIMULATION_PATH]',
        '[--target TARGET]',
        '[--lang LANG]',
        '[--theme THEME]',
        '[--middleware MIDDLEWARE_PATH]',
        '[--generateids (GENERATEIDS)]',
        '[--spaurlrewrites (SPA_URL_REWRITES)]'
    ];

    return message + options.join(' ') + os.EOL;
}
